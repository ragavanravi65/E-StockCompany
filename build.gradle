plugins {
	id 'org.springframework.boot' version '2.5.12'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "org.sonarqube" version "3.3"
	id 'jacoco'
}

group = 'com.company.service'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
def exclusionList = [
		"**com/company/service/estockcompany/service/**",
		"**/com/company/service/estockcompany/EStockCompanyApplication.java",
		"**/com/company/service/estockcompany/configuration/SwaggerConfiguration.java"
]

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'mysql:mysql-connector-java:8.0.21'
	implementation 'org.springframework.boot:spring-boot-starter-validation:2.6.6'
	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:3.0.5'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb:2.6.7'
	implementation 'io.micrometer:micrometer-registry-prometheus:1.8.5'
	annotationProcessor "org.mapstruct:mapstruct-processor:1.4.2.Final"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'junit:junit:4.13'

}



bootJar {
	baseName = "eStockCompany"
	version =  '1.0.0'
}

tasks.named('sonarqube').configure {
	dependsOn test
}

sonarqube {
	properties {
		property "sonar.projectKey", "E-CompanyData"
		property "sonar.host.url","http://localhost:9000"
		property  "sonar.login","de4249f42ab78557da1d2f51f4d45baf183c948e"
		property  "sonar.jacoco.reportPath","build/reports/jacoco/test/jacocoTestReport.xml"
		property 'sonar.coverage.exclusions',exclusionList
	}
}

tasks.named('test') {
	useJUnit()
	finalizedBy jacocoTestReport
}


jacocoTestReport {
	dependsOn test
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/model/**",
					"**/configuration/*",
					"**/util/**",
					"**/mapper/**",
					"com/company/service/estockcompany/service/**",
					"com/company/service/estockcompany/EStockCompanyApplication.java"
			])
		}))
	}

	reports {
		xml.enabled(true)
	}
}

jacoco {
	toolVersion = "0.8.7"
}
